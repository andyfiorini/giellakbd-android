#!/usr/bin/env python


from dataclasses import dataclass
import argparse
from itertools import groupby
from xml.dom import minidom
from xml.etree.ElementTree import Element, SubElement, Comment, tostring
import sys


@dataclass()
class Emoji:
    code: str
    group: str

    def android_code(self):
        return self.code.replace(' ', ',')

    def android_group(self):
        return "emoji_" + self.group


def prettify(elem):
    """Return a pretty-printed XML string for the Element.
    """
    rough_string = tostring(elem, 'utf-8')
    reparsed = minidom.parseString(rough_string)
    return reparsed.toprettyxml(indent="    ")


class Parser:
    def __init__(self):
        pass

    @staticmethod
    def parser():
        parser = argparse.ArgumentParser(description='Convert unicode emoji to xml for Android resources usages.')
        parser.add_argument('-i', '--input', action="store", dest="input_file",
                            type=argparse.FileType('r', encoding='UTF-8'),
                            help='File containing emoji definitions', required=True)
        parser.add_argument('-o', '--output', action="store", dest="output_file",
                            type=argparse.FileType('w+', encoding='UTF-8'),
                            help='Output file were to writes the resources', required=True)

        return parser


def main():
    parser = Parser().parser()

    args = parser.parse_args()

    group_identifier = "# group: "
    comment_identifier = '#'
    emojis = []

    group = ""
    for line in args.input_file:
        if line.startswith(comment_identifier):
            if line.startswith(group_identifier):
                group = line.split(group_identifier, 1)[1].strip().lower().replace('&', 'and').replace(' ', '_')
        elif line.strip():
            values = line.split(';', 2)
            if values[1].strip().startswith('fully-qualified'):
                emoji = Emoji(values[0].strip().lower(), group)
                emojis.append(emoji)

    grouped_emojis = groupby(emojis, key=lambda e: e.android_group())

    root = Element('resources')
    comment = Comment('This is autogenerated emojis from unicode definition')
    root.append(comment)

    for group in grouped_emojis:
        array = SubElement(root, 'array', {
            'name': group[0],
            'type': 'string'
        })
        group_emojis = group[1]
        for emoji in group_emojis:
            item = SubElement(array, 'item')
            item.text = emoji.android_code()

    emojis.sort(key=lambda e: e.group)

    with args.output_file as file:
        file.write(prettify(root))

    sys.exit(0)


if __name__ == '__main__':
    main()
